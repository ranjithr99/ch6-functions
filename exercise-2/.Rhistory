meals
meal
meal <- c(meal, "Pizza")
meal
add_pizza <- function() {
meal <- c(meal, "Pizza")
meal
}
meal <- c(meal, "Pizza")
meal
add_pizza <- function() {
meal <- c(meal, "Pizza")
meal
}
# Create a vector `better_meals` that is all your meals, but with pizza!
meal
items_ate <- lapply(meals, length)
add_pizza(meals)
add_pizza(my_lunch)
better_meals <- lapply(meals, add_pizza)
better_meals <- lapply(meals, add_pizza)
lintr::lint(exercise.R)
lintr::lint("exercise.R")
meal <- c(meal, "Pizza")
add_pizza <- function(meal) {
meal <- c(meal, "Pizza")
}
add_pizza <- function(meal) {
meal <- c(meal, "Pizza")
}
meal <- c(meal, "Pizza")
better_meals <- lapply(meals, add_pizza)
better_meals
# of the season (google "Seahawks" for the scores!)
seahawks_score <- c(24, 21, 7, 24)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
allowed_points <- c(26, 21, 42, 30)
games <- data.frame(seahawks_score, allowed_points)
games
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <= games$seahawks_score - games$allowed_points
games
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$seahawks_score - games$allowed_points
games
games$won <- games$diff > 0
opponents <- c("cardinals", "cowboys", "rams", "jaguars")
opponents <- c("cardinals", "cowboys", "rams", "jaguars")
rownames(games) <- opponents
games
allowed_points <- c(26, 12, 42, 30)
view(games)
View(games)
games$seahawks_score
View(games)
allowed_points <- c(26, 12, 42, 30)
games <- data.frame(seahawks_score, allowed_points)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$seahawks_score - games$allowed_points
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_score <- c(24, 21, 7, 24)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
allowed_points <- c(26, 12, 42, 30)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_score, allowed_points)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$seahawks_score - games$allowed_points
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("cardinals", "cowboys", "rams", "jaguars")
# Assign your dataframe rownames of their opponents
rownames(games) <- opponents
# View your data frame to see how it has changed!
View(games)
employees <- paste("Employee", 1:100)
employees
?runif
salaries <- c(runif(100, min = 40000, max = 50000))
salaries
salaries_2017 <- c(runif(100, min = 40000, max = 50000))
salaries_2018 <- salaries_2017 + runif(100, min = -5000, max = 10000)
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
salaries
install.packages("stringr")
clear
q
clear
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Ranjith"
minutes_in_a_day <- 24 * 60
minutes_in_a_day
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365 * 24
hours_in_a_year
?paste
?print
make_introduction <- function(name, age) {
print("Hello, my name is" name", and I'm" age "years old.")
}
print("Hello, my name is" + name + ", and I'm" +  age + "years old.")
?stringr
load
load("stringr")
load(stringr)
?substr
?tolower
?paste
make_introduction <- function(name, age) {
paste("Hello, my name is", name, ", and I'm", age, "years old")
}
my_intro <- make_introduction(my_name, my_age)
make_introduction(baby kutta, 9)
make_introduction(baby, 9)
str_to_title
?str_to_title
install.packages("stringr")
library()
stringr
library(stringr)
?stringr
?str_to_title
?str_count
double(10)
double <- function(value) {
value * 2
}
double(10)
minutes_in_two_days <- double(minutes_in_a_day)
minutes_in_two_days
?Math
cube <- function(value) {
value^3
}
cube(3)
twenty_seven <- cube(3)
movies <- c("Harry Potter", "Interstellar", "Mission Impossible", "Die Hard", "Avengers", "Inception")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies(1:3)
top_three <- head(movies,3)
top_three
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "Interstellar", "Mission Impossible", "Die Hard", "Avengers", "Inception")
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
excited
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!")
excited
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "Interstellar", "Mission Impossible", "Die Hard", "Avengers", "Inception")
top_three <- movies[1:3]
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-4]
top_three
without_four
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:900)
numbers
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
len
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
numbers_mean
?mean
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
all_numbers
make_introduction <- function(name, age) {
paste("Hello, my name is", name)
paste(", and I'm", age, "years old")
}
make_introduction()
make_introduction(baby, 9)
make_introduction("baby", 9)
make_introduction <- function(name, age) {
paste("Hello, my name is", name, ", and I'm", age, "years old")
}
make_introduction("baby kutta", 18)
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Ranjith"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365 * 24
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
paste("Hello, my name is", name, ", and I'm", age, "years old")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <-
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- to_lower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
value^3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "Interstellar", "Mission Impossible", "Die Hard", "Avengers", "Inception")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-4]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:900)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the appropriate function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
my_intro
loud_intro
quiet_intro
quiet_intro <- to_lower(my_intro)
quiet_intro <- tolower(my_intro)
quiet_intro
# Use the appropriate function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
today
?as.Date
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date(2018-06-08)
?as.Date
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date(2018/06/08)
?gsub
remove_digits <- function(vector) {
gsub(1:9,"",vector)
}
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter9", "Interstellar", "Mission Impossible", "Die Hard", "Avengers", "Inception")
remove_digits(movies)
remove_digits <- function(vector) {
gsub('[0-9]+',"",vector)
}
remove_digits(movies)
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "Interstellar", "Mission Impossible", "Die Hard", "Avengers", "Inception")
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("MATH 126", "ENGL 131", "INFO 201"))
gsub("1:9","",vector)
remove_digits <- function(vector) {
gsub("1:9","",vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("MATH 126", "ENGL 131", "INFO 201"))
gsub("[1-9]","",vector)
remove_digits <- function(vector) {
gsub("[1-9]","",vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("MATH 126", "ENGL 131", "INFO 201"))
gsub("[1-9]+","",vector)
remove_digits <- function(vector) {
gsub("[1-9]+","",vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("MATH 126", "ENGL 131", "INFO 201"))
gsub('[1-9]+',"",vector)
remove_digits <- function(vector) {
gsub('[1-9]+',"",vector)
}
remove_
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("MATH 126", "ENGL 131", "INFO 201"))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("MATH 126", "ENGL 131", "INFO 201"))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("MATH 126", "ENGL 131", "INFO 201"))
gsub('[1-9]+','',vector)
remove_digits <- function(vector) {
gsub('[1-9]+','',vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("MATH 126", "ENGL 131", "INFO 201"))
remove_digits <- function(vector) {
gsub('[0-9]','',vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("MATH 126", "ENGL 131", "INFO 201"))
remove_digits <- function(vector) {
gsub("[0-9]","",vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("MATH 126", "ENGL 131", "INFO 201"))
styler:::style_active_file()
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
casual_intro
make_introduction()
make_introduction
make_introduction(ranjith, 19)
make_introduction("ranjith", 19)
paste("Hello, my name is",name, ", and I'm", age, "years old")
make_introduction <- function(name, age) {
paste("Hello, my name is",name, ", and I'm", age, "years old")
}
make_introduction("ranjith", 19)
paste("In", days_to_birthday, "I'll be", age + 1)
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date(c("2018-06-08"))
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
make_introduction(name, age)
days_to_birthday <- upcoming_birthday - Sys.Date()
if (days_to_birthday < 0) {
days_to_birthday <- 365 + days_to_birthday
}
paste("In", days_to_birthday, "I'll be", age + 1)
}
make_birthday_intro("Ranjith", 19, "2019-01-14")
paste("In", days_to_birthday, "I'll be", age + 1)
make_birthday_intro("Ranjith", 19, 2019-01-14)
summer_break
days_to_break
make_birthday_intro("Ranjith", 19, 14jan2019)
make_birthday_intro("Ranjith", 19, "14jan2019")
make_birthday_intro("Ranjith", 19, 2019-01014)
make_birthday_intro("Ranjith", 19, 2019-01-14)
make_birthday_intro("Ranjith", 19, "2019-01-14")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
make_introduction(name, age)
days_to_birthday <- upcoming_birthday - Sys.Date()
if (days_to_birthday < 0) {
days_to_birthday <- 365 + days_to_birthday
}
paste("In", days_to_birthday, "I'll be", age + 1)
}
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
make_introduction(name, age)
days_to_birthday <- upcoming_birthday - Sys.Date()
if (days_to_birthday < 0) {
days_to_birthday <- 365 + days_to_birthday
}
paste("In", days_to_birthday, "I'll be", age + 1)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-01-14")
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-01-14")
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-01-14")
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date(c("2019-01-14"))
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date(c("2019-01-14"))
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date(c("2019-01-14"))
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date(c("2019-01-14"))
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date(c("2019-01-14")))
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date(c("2019-01-14")))
my_bday_intro
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_to_birthday <- upcoming_birthday - Sys.Date()
if (days_to_birthday < 0) {
days_to_birthday <- 365 + days_to_birthday
}
paste(make_introduction(name, age), "In", days_to_birthday, "I'll be", age + 1)
}
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_to_birthday <- upcoming_birthday - Sys.Date()
if (days_to_birthday < 0) {
days_to_birthday <- 365 + days_to_birthday
}
paste(make_introduction(name, age), "In", days_to_birthday, "I'll be", age + 1)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date(c("2019-01-14")))
my_bday_intro
styler:::style_active_file()
